void body_make(float lr_value, float fb_value, float tw_value){
  //value mapping
  float lr = map(lr_value, -1, 1, 3*PI/4, PI/4);
  float fb = map(fb_value, -1, 1.5, 3*PI/4, PI/8);
  float tw = map(tw_value, -1, 1, PI/2, -PI/2); 
  //calc bone
  float h = BODY_HEIGHT;
  float ep_x = h * cos(lr);
  float ep_y = -h * sin(lr) * sin(fb);  
  float ep_z = h * sin(lr) * cos(fb); 
  PVector cp = new PVector(0,-h/2,0);
  //face_point
  //-0.4, 0.0, -0.8
  PVector ep = new PVector(ep_x, ep_y, ep_z).normalize();
  float fh = h + HEAD_SIZE/2;
  head_pos = ep.mult(fh);
  make_face(atan2(ep_y,ep_x), atan2(ep_y,ep_z), tw, head_pos);
  strokeWeight(10);
  point(head_pos.x, head_pos.y, head_pos.z);
  strokeWeight(1);
  //culc points
  for(int i=0;i<BODY_NODE;i++){
      //bone line
      float t = i * 1.0/(BODY_NODE-1);
      float sampx = (2 * cp.x * t * (1-t)) + (ep_x * pow(t,2));
      float sampy = (2 * cp.y * t * (1-t)) + (ep_y * pow(t,2)); 
      float sampz = (2 * cp.z * t * (1-t)) + (ep_z * pow(t,2));
      PVector bone = new PVector(sampx, sampy, sampz);  
      //units
      float r = (BODY_HEIGHT*0.9)*cos(pow(t,1.2)*PI/3);
      PVector unit = new PVector(cos(tw*t),0,sin(tw*t));
      PVector v1 = unit.cross(bone).normalize().mult(r);
      if(i==0){v1 = new PVector(0,0,-r);}
      PVector v2 = v1.cross(bone).normalize().mult(r);
      if(i==0){v2 = new PVector(-r,0,0);}
      PVector v3 = new PVector(-v1.x,-v1.y,-v1.z);
      PVector v4 = new PVector(-v2.x,-v2.y,-v2.z);   
      //set points
      int seg = BODY_EDGE/4;
      for(int j=0; j<seg; j++){ 
        float div = j * 1.0/(seg);
        body_pt[i][j] = PVector.lerp(v1,v2,div).normalize().mult(r).add(bone);
        body_pt[i][j+seg] = PVector.lerp(v2,v3,div).normalize().mult(r).add(bone);
        body_pt[i][j+2*seg] = PVector.lerp(v3,v4,div).normalize().mult(r).add(bone);
        body_pt[i][j+3*seg] = PVector.lerp(v4,v1,div).normalize().mult(r).add(bone);
      }
  }
  //make mesh
  for(int i=0;i<BODY_EDGE;i++){
    beginShape(TRIANGLE_STRIP);
    for(int j=0;j<BODY_NODE;j++){
        vertex(body_pt[j][i].x, body_pt[j][i].y, body_pt[j][i].z);
        if(i==BODY_EDGE-1){
          vertex(body_pt[j][0].x, body_pt[j][0].y, body_pt[j][0].z);
        }else{
          vertex(body_pt[j][i+1].x, body_pt[j][i+1].y, body_pt[j][i+1].z);       
        }
    }
    endShape(CLOSE);
  }
}
