// ページの読み込みを待つ
window.addEventListener('load', init);

function init() {

  // サイズを指定
  const width = 800;
  const height = 400;

  // レンダラーを作成
  let renderer = new THREE.WebGLRenderer({
        canvas: document.querySelector('#myCanvas')
      });
  //renderer.setClearColor(0xcccccc, 1.0);
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(width, height);

  // シーンを作成
  let scene = new THREE.Scene();

  // カメラを作成
  let camera = new THREE.PerspectiveCamera(45, width / height);
  camera.position.set(0, 0, 10);
  camera.lookAt(new THREE.Vector3(0, 0, 0));


/////////////////////////////////////////////////////////////////

  //def共通
  const nPos = 3;
  const vRect = nPos * 4;

  //arm
  const numNode = 5;
  const jointNode = 6;
  const numEdge = 8;
  const arm1Length = 3;
  const arm2Length = 3;
  let endRot = 0;
  let arm_pos = new THREE.Vector3(-1, 1, 0);
  let sPos = new THREE.Vector2(0, 0);
  var arm_L = new THREE.Group();

  let arm1_mat = new THREE.MeshLambertMaterial();
  let arm2_mat = new THREE.MeshPhongMaterial({
               color: 0x990099, //球の色
               wireframe: false //ワイヤーフレーム有効
      });
  let arm1_obj = new THREE.Mesh();

  const arm_r = 0.8;
  let arm1_r = new Array(numNode);
  let arm2_h = new Array(numNode);
  let arm2_w = new Array(numNode);

  //thick
  for(let i=0; i<numNode; i++){
    let t = i * 1.0/(numNode-1);
    let r1 = arm_r;
    let r2 = r1 * Math.cos(1*Math.PI/7);
    arm1_r[i] = r1 * Math.cos(Math.pow(t,1.3)*Math.PI/7);
    arm2_h[i] = r2 * Math.cos(Math.pow(t,0.8)*Math.PI/3);
    arm2_w[i] = r2 * Math.cos(Math.pow(t,0.8)*Math.PI/5);
  }

  //マッピング
  function mapping(value, inMin, inMax, outMin, outMax){
    let norm = (value - inMin)/(inMax - inMin);
    let out = norm * (outMax - outMin) + outMin;
    return out;
  }

  //
  function makeArm(v1, rot1, v2, rot2){

    const l1 = arm1Length;
    const l2 = arm2Length;
    const axis = new THREE.Vector3(1, 0, 0);

    //arm1

    let bend1 = mapping(v1, -1.0, 2.0, Math.PI/4, -Math.PI/2);
    let ep1 = new THREE.Vector3(l1*Math.cos(bend1), l1*Math.sin(bend1), 0);
    let cp1 = new THREE.Vector2(0, 0);
    if(ep1.y>0){
      cp1.y = l1/2 * Math.sin(bend1);
    }else{
      cp1.x = l1/2 * -Math.sin(bend1);
    }
    arm1_obj = makeCylinder(ep1, cp1, sPos, arm1_r, arm1_r, arm1_mat);
    //console.log(endRot);

    let bend2 = -Math.PI/4;
    makeJoint(bend2, ep1);
    //console.log(endRot);

    let bend3 = endRot;
    //endRot = bend3;
    //console.log(endRot);
    let ep2 = new THREE.Vector3(l2*Math.cos(bend3), l2*Math.sin(bend3), 0);
    let cp2 = new THREE.Vector2(0, 0);
    let arm2_obj = makeCylinder(ep2, cp2, sPos, arm2_h, arm2_w, arm2_mat);

    //arm2
    //let rad2 = mapping(v2, 0.0, 1.0, 0.0, -2.5*Math.PI/4);
    //rad2 = endRot + rad2;
    //let ep2 = new THREE.Vector3(l2*Math.cos(rad2), l2*Math.sin(rad2), 0);
    //let cp2 = new THREE.Vector2(l1/1.5*Math.cos(endRot), l1/1.5*Math.sin(endRot));
    //let cp2 = new THREE.Vector2(1,1);
    //arm2_obj = makeCylinder(ep2, cp2, arm2_w, arm2_h, arm2_mat);


    //回転
    arm1_obj.rotation.x = rot1;
    let arm1_end = ep1.applyAxisAngle(axis, rot1);


    //arm2_obj.rotation.x = rot1+rot2;
    //arm2_obj.position.set(arm1_end.x, arm1_end.y, arm1_end.z);


    //グループ化
    //arm_L.add(arm1_obj);
    //arm_L.add(arm2_obj);
    //arm_L.position.set(arm_pos.x, arm_pos.y, arm_pos.z);
    //arm_L.rotation.x = -Math.PI/4;

    //scene.add(arm_L);
    scene.add(arm1_obj);
    //scene.add(arm2_obj);



  }


  function makeCylinder(ep, cp, pos, h, w, mat){
    let pt = [];
    let rot = 0;
    let zpos = new THREE.Vector2( 0, 0 );
    const center = new THREE.Vector2( 0, 0 );
    for(var i=0; i<numNode; i++){
      pt[i] = [];
      //bone
      let t = i * 1.0/(numNode-1);
      let x = (2 * cp.x * t * (1-t)) + (ep.x * Math.pow(t,2));
      let y = (2 * cp.y * t * (1-t)) + (ep.y * Math.pow(t,2));
      rot = Math.atan2(y-zpos.y, x-zpos.x);
      if(i==0){rot=endRot;}
      zpos = new THREE.Vector2( x, y );
      //set points
      for(var j=0; j<numEdge; j++){
        let z = w[i] * Math.cos(j*2*Math.PI/numEdge);
        let v = new THREE.Vector2(0, h[i] * Math.sin(j*2*Math.PI/numEdge));
        v = v.rotateAround(center, rot);
        pt[i][j] = [v.x+x+pos.x, v.y+y+pos.y, z];
      }
    }
    endRot = rot;
    let geometry = setGeometry(numNode, numEdge, pt);
    let obj = new THREE.Mesh(geometry, mat);
    return obj;
  }


  function makeJoint(rad, pos){
    let pt = [];
    let len = 
    let r = arm_r * Math.cos(Math.PI/7);
    let origin = new THREE.Vector2(0,-r);
    origin.add(pos);
    origin.rotateAround(pos, endRot);

    for(let i=0; i<jointNode; i++){
      pt[i] = [];
      let t = i * rad/(jointNode-1) + endRot;
      let center = new THREE.Vector2(0,r);
      center.add(origin);
      center.rotateAround(origin, t);

      for(let j=0; j<numEdge; j++){
        let z = r * Math.cos(j*2*Math.PI/numEdge);
        let v = new THREE.Vector2(0, r * Math.sin(j*2*Math.PI/numEdge));
        v.add(center);
        v.rotateAround(center, t);
        pt[i][j] = [v.x, v.y, z];
      }
    }
    let geometry = setGeometry(jointNode, numEdge, pt);
    let mat = new THREE.MeshLambertMaterial({color: 0x990000});
    let obj = new THREE.Mesh(geometry, mat);
    scene.add(obj);
    endRot = rad + endRot;
    sPos = new THREE.Vector2(0,r).add(origin).rotateAround(origin, rad);
}



  makeArm(0.9, 0, 0.0, 0);




  function setGeometry(nNode, nEdge, pt){
    let numVertices = vRect*(nNode-1)*nEdge;
    let vertices = new Float32Array(numVertices);
    for(var i=0; i<nNode-1; i++){
      for(var j=0; j<nEdge; j++){
        for(var k=0;k<nPos;k++){
          let n = i*vRect*nEdge + j*vRect + k;
          vertices[n+nPos*0] = pt[i][j][k];
          vertices[n+nPos*1] = pt[i][(j+1)%nEdge][k];
          vertices[n+nPos*2] = pt[i+1][(j+1)%nEdge][k];
          vertices[n+nPos*3] = pt[i+1][j][k];
        }
      }
    }
    //頂点インデックス
    let order = [0,1,2,2,3,0];
    let indices = new Uint16Array(numVertices/2);
    for(let i=0; i<numVertices/12; i++){
      for(let j=0; j<order.length; j++){
        indices[i*6+j] = i*4+order[j];
      }
    }
    let geometry = new THREE.BufferGeometry();
    geometry.addAttribute('position', new THREE.BufferAttribute(vertices, nPos));
    geometry.setIndex(new THREE.BufferAttribute(indices, 1));
    geometry.computeVertexNormals();
    return geometry;
  }



  //ライト
  const directionalLight = new THREE.DirectionalLight(0xffffff,1);
  directionalLight.position.set(0,1,10);
  scene.add(directionalLight);

  const envlight = new THREE.AmbientLight(0xFFFFFF, 0.2);
  scene.add(envlight);
  // レンダリング
  renderer.render(scene, camera);

}
