void foot_thick_set(){
  for(int i=0; i<FOOT1_NODE; i++){
    float r = BODY_WIDTH/2;
    float t = i * 1.0/(FOOT1_NODE-1);
    foot1r[i] = r * cos(pow(t,1.3)*(QUARTER_PI));
  }
  for(int i=0; i<FOOT2_NODE; i++){
    float r = foot1r[FOOT1_NODE-1];
    float t = i * 1.0/(FOOT2_NODE-1);
    foot2r[i] = r * cos(pow(t,0.8)*QUARTER_PI);
  }
}


void make_foot_base(){
  int node = int(FOOT1_NODE/2);
  int edge = FOOT_EDGE;
  float h = -FOOT1_LENGTH/2;
  PVector[][] pt = new PVector[node][edge];
  for(int i=0; i<node;i++){ 
    float t = i * 1.0/(node-1);
    float y = t*h;
    for(int j=0; j<edge;j++){
      float r = (BODY_WIDTH/2)*cos(t*PI/2);
      float x = r * cos(j*TWO_PI/edge);
      float z = r * sin(j*TWO_PI/edge);      
      pt[i][j] = new PVector(x,y,z);
    }
  }
  fill(255,0,0);
  //make_mesh(node, edge, pt);  
}


void make_foot(){

  pushMatrix();
  translate(BODY_WIDTH/2, 0, 0);
  make_foot_base();
  foot_thick_set();
  PVector ep = new PVector(0,50,-10);
  PVector cp = new PVector(0,0,0);
  foot_pt_set(12, ep, cp, foot1r);
  popMatrix();







}


void foot_pt_set(int node, PVector ep, PVector cp, float[] footr){

  int NODE_NUM = node;
  float rot = 0;
  PVector zpos = new PVector(0,0);
  PVector[][] pt = new PVector[NODE_NUM][FOOT_EDGE];
  //bone cal
  for(int i=0; i<NODE_NUM; i++){ 
    float t = i * 1.0/(NODE_NUM-1);
    float x = (2 * cp.y * t * (1-t)) + (ep.y * pow(t,2));
    float y = (2 * cp.z * t * (1-t)) + (ep.z * pow(t,2)); 
    rot = -1 * atan2(-1*(y-zpos.y),x-zpos.x);
    if(i==0){rot=footrot;}
    zpos = new PVector(x,y);
    //set points
    for(int j=0; j<FOOT_EDGE; j++){
      float z = footr[i] * cos(j * TWO_PI/FOOT_EDGE);
      PVector v = new PVector(0, footr[i] * sin(j * 2 * PI/FOOT_EDGE)).rotate(rot);
      pt[i][j] = new PVector(v.x + x, v.y + y, z); 
    }
  }
  footrot = rot;
  make_mesh(NODE_NUM, FOOT_EDGE, pt); 
}
