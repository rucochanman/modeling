void foot_thick_set(){
  for(int i=0; i<FOOT0_NODE; i++){
    foot0tf[i] = 2 * BODY_THICK/1.5;
    foot0tb[i] = BODY_THICK/1.5;    
    foot0w[i] = BODY_WIDTH/2;      
  }  
  for(int i=0; i<FOOT1_NODE; i++){
    float t = i * 1.0/(FOOT1_NODE-1);    
    float rt = foot0tb[FOOT0_NODE-1];
    float rw = foot0w[FOOT0_NODE-1];
    foot1tf[i] = 2 * rt * cos(pow(t,1.5)*(PI/6));
    foot1tb[i] = rt * cos(pow(t,1.5)*(PI/3));
    foot1w[i] = rw * cos(pow(t,1.5)*(PI/4));    
  }
  for(int i=0; i<FOOT2_NODE; i++){
    float t = i * 1.0/(FOOT2_NODE-1);
    float rt = foot1tb[FOOT1_NODE-1];
    float rf = foot1tf[FOOT1_NODE-1];    
    float rw = foot1w[FOOT1_NODE-1];    
    foot2tf[i] = rf * cos(t*PI/5);
    foot2tb[i] = rt * cos(pow(t,1.5)*PI/3);    
    foot2w[i] = rw * cos(pow(t,1.5)*PI/3);    
  }
}


void make_foot(float value0, float value2){
  foot_thick_set();

  pushMatrix();
  translate(BODY_WIDTH/2, 0, -BODY_THICK/3);
  //make_foot_base();
  //foot0
  float l0 = FOOT0_LENGTH;
  float rad0 = map(value0, -1, 2, -3*PI/4, 0);  
  PVector ep0 = new PVector(0, -l0*sin(rad0), l0*cos(rad0));
  PVector cp0 = new PVector(0, l0, 0);
  foot_pt_set(FOOT0_NODE, ep0, cp0, foot0w, foot0tf, foot0tb);
  //foot1
  fill(255,0,0);
  translate(ep0.x, ep0.y, ep0.z);
  //rotateX(segrot2);
  float l1 = FOOT1_LENGTH;  
  PVector ep1 = new PVector(0, -l1*sin(footrot-PI/2), l1*cos(footrot-PI/2));
  PVector cp1 = new PVector(0, 0, 0);  
  foot_pt_set(FOOT1_NODE, ep1, cp1, foot1w, foot1tf, foot1tb);
  //foot2
  fill(25,240,0);  
  translate(ep1.x, ep1.y, ep1.z);  
  float l2 = FOOT2_LENGTH;
  float rad2 = map(value2, 0, 1, 0, 3*PI/4);  
  PVector ep2 = new PVector(0, l2*cos(footrot-rad2), l2*sin(footrot-rad2));
  PVector cp2 = new PVector(0, 0, 0);
  //point(0,10,-8);
  //println(footrot-HALF_PI);
  //println(sin(footrot-HALF_PI));
  //println(cos(footrot-HALF_PI));  
  //PVector cp2 = new PVector(0, 0, 0);   
  foot_pt_set(FOOT2_NODE, ep2, cp2, foot2w, foot2tf, foot2tb);
  
  popMatrix();
  







}


void foot_pt_set(int node, PVector ep, PVector cp, float[] rw, float[] rt1, float[] rt2){
  int NODE_NUM = node;
  float rot = 0;
  PVector zpos = new PVector(0,0);
  PVector[][] pt = new PVector[NODE_NUM][FOOT_EDGE];
  //bone cal
  for(int i=0; i<NODE_NUM; i++){ 
    float t = i * 1.0/(NODE_NUM-1);
    float z = (2 * cp.z * t * (1-t)) + (ep.z * pow(t,2));
    float y = (2 * cp.y * t * (1-t)) + (ep.y * pow(t,2)); 
    rot = -1 * atan2(-1*(z-zpos.z),y-zpos.y);
    if(i==0){rot=footrot;}
    zpos = new PVector(0,y,z);
    //set points
    for(int j=0; j<FOOT_EDGE; j++){
      float r2 = rt1[i];
      if(j>FOOT_EDGE/2){
        r2 = rt2[i];
      }
      float x = rw[i] * cos(j * TWO_PI/FOOT_EDGE);
      PVector v = new PVector(0, r2 * sin(j * TWO_PI/FOOT_EDGE)).rotate(rot);
      pt[i][j] = new PVector(x, v.x + y, v.y + z); 
    }
  }
  footrot = rot;
  make_mesh(NODE_NUM, FOOT_EDGE, pt); 
}




/*
void make_foot_base(){
  int node = int(FOOT1_NODE/2);
  int edge = FOOT_EDGE;
  float h = -FOOT1_LENGTH/2;
  PVector[][] pt = new PVector[node][edge];
  for(int i=0; i<node;i++){ 
    float t = i * 1.0/(node-1);
    float y = t*h;
    for(int j=0; j<edge;j++){
      float r = (BODY_WIDTH/2)*cos(t*PI/2);
      float x = r * cos(j*TWO_PI/edge);
      float z = r * sin(j*TWO_PI/edge);      
      pt[i][j] = new PVector(x,y,z);
    }
  }

  //make_mesh(node, edge, pt);  
}

*/
