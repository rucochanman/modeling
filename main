PVector armPos = new PVector(100,150);
float endrot;

PVector cp_armL1 = new PVector(25,0);
PVector ep_armL1 = new PVector(50,0);
PVector cp_armL2 = new PVector(10,0);
PVector ep_armL2 = new PVector(50,0); 


void setup(){
  size(500, 500, P3D); 
  frameRate(10);
  //noLoop();
}

void draw(){
  
  background(100);

  pushMatrix();
  translate(armPos.x,armPos.y);
  
  float f = frameCount%20;
  ep_armL2.y = f;
  ep_armL2.x = 50 - f;
  ep_armL1.y = f;
  //float angle = f*0.02 / PI;
  arm_make(ep_armL1,cp_armL1,ep_armL2,cp_armL2,0);
  popMatrix();  

}

void arm_make(PVector end1, PVector cp1, PVector end2, PVector cp2, float angle){

  int arm_edge = 8;
  int arm1_node = 6;
  int arm2_node = 10;
  int hand_node = 4;
  int fing_edge = 6;
  int fing_node = 3;
  
  float[] thick1 = new float[]{20,20,20,20,20,20};
  float[] thick2 = new float[]{20,20,20,20,20,20,20,19,19,17};
  float[] thickh = new float[]{17,16,14,9};
  float[] thickf = new float[]{5,4,2};
  PVector cp_hand = new PVector(8,0); 
  PVector ep_hand = new PVector(16,0); 
  PVector cp_fing1 = new PVector(4,0); 
  PVector ep_fing1 = new PVector(8,0); 
  PVector cp_fing2 = new PVector(4,-2.5); 
  PVector ep_fing2 = new PVector(8,-5); 
  PVector cp_fing3 = new PVector(4,2.5); 
  PVector ep_fing3 = new PVector(8,5); 
  PVector cp_sumb = new PVector(3,3); 
  PVector ep_sumb = new PVector(6,6); 

  //arm1
  fill(255,255,255);
  arm_set(arm_edge, arm1_node, end1, cp1, thick1);
  //arm2
  pushMatrix();
  translate(end1.x,end1.y);
  rotateZ(endrot);
  rotateX(angle);
  fill(100,200,200);
  arm_set(arm_edge, arm2_node, end2, cp2, thick2);
  //hand
  translate(end2.x,end2.y);
  rotateZ(endrot);
  arm_set(arm_edge, hand_node, ep_hand, cp_hand, thickh);
  //finger
  translate(ep_hand.x,cp_hand.y);
  rotateZ(endrot);
  arm_set(fing_edge, fing_node, ep_fing1, cp_fing1, thickf); //mid
  translate(-3,-5);
  arm_set(fing_edge, fing_node, ep_fing2, cp_fing2, thickf); //ind
  translate(0,10);
  arm_set(fing_edge, fing_node, ep_fing3, cp_fing3, thickf); //lit
  translate(-4,7);
  arm_set(fing_edge, fing_node, ep_sumb, cp_sumb, thickf); //sumb
  popMatrix();

}

void arm_set(int edge, int node, PVector end, PVector cp, float[] thick){
  
  int NODE_NUM = node;
  int EDGE_NUM = edge;
  PVector[][] pt = new PVector[NODE_NUM][EDGE_NUM];
  float rot = 0;
  
  for(int i=0; i<NODE_NUM; i++){
    
    float t = i * 1.0/(NODE_NUM-1);
    float x = (2 * cp.x * t * (1-t)) + (end.x * pow(t,2));
    float y = (2 * cp.y * t * (1-t)) + (end.y * pow(t,2)); 
    rot = -1 * atan2(-1*y,x);
    
    for(int j=0; j<EDGE_NUM; j++){
      float z = thick[i] * cos(j * 2 * PI/EDGE_NUM);
      PVector v = new PVector(0, thick[i] * sin(j * 2 * PI/EDGE_NUM)).rotate(rot);
      pt[i][j] = new PVector(v.x + x, v.y + y, z);       
    }
  }
  endrot = rot;
  
  //mesh
  for(int i=0; i<EDGE_NUM; i++){
    beginShape(TRIANGLE_STRIP);
    for(int j=0; j<NODE_NUM; j++){
      vertex(pt[j][i].x,pt[j][i].y,pt[j][i].z);
      if(i==EDGE_NUM-1){
        vertex(pt[j][0].x,pt[j][0].y,pt[j][0].z);
      }else{
        vertex(pt[j][i+1].x,pt[j][i+1].y,pt[j][i+1].z);
      }
    }
    endShape();
  }
}


