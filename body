int BODY_NODE = 6;
int BODY_DIV = 8;
float BODY_HEIGHT = -80;
float[] BODY_WEIGHT = {50,50,50,50,50,50};
float[] body_bend_lr = {-0.5,-0.3,0,0.3,0.5};
float[] body_bend_fb = {0,0.2,0.5,0.2,0};
float[] body_twist = {0,0,0,0,0};
PVector[][] body_pt = new PVector[BODY_NODE][BODY_DIV];

void setup(){
  size(500, 500, P3D); 
  noLoop();
  //frameRate(1);
}


void draw(){

  background(200);
  pushMatrix();
  translate(width/2,height/2);
  rotateX(PI/2);
  
  int step = frameCount%5;
  //body_make(body_bend_lr[step],body_bend_fb[step],0);
  body_make(0,2,0);
  
  popMatrix();
}


void body_make(float lr_value, float fb_value, float tw_value){
  
  //value mapping
  float lr = map(lr_value, -1, 1, PI/4, 3*PI/4);
  float fb = map(fb_value, -1, 2, 3*PI/4, -PI/8);
  float tw = map(fb_value, -1, 1, PI/4, -PI/4); 
  
  //culc bone
  float h = BODY_HEIGHT;
  float ep_x = h * cos(lr);
  float ep_y = h * sin(lr) * sin(fb);  
  float ep_z = h * sin(lr) * cos(fb); 
  PVector cp = new PVector(0,h/3,0);
  
  //culc points
  for(int i=0;i<BODY_NODE;i++){
    for(int j=0;j<BODY_DIV;j++){
      
      float t = i * 1.0/(BODY_NODE-1);
      float sampx = (2 * cp.x * t * (1-t)) + (ep_x * pow(t,2));
      float sampy = (2 * cp.y * t * (1-t)) + (ep_y * pow(t,2)); 
      float sampz = (2 * cp.z * t * (1-t)) + (ep_z * pow(t,2)); 
      strokeWeight(5);
      stroke(255,0,0);
      point(sampx, sampy, sampz);
      
      float rotZ = atan2(sampx,sampy) + PI/2;
      float rotX = atan2(-sampz,sampy); 
      float rotY = 0;
      if(i!=0){rotY = tw/(BODY_NODE-i);};

      float r = BODY_WEIGHT[i];
      float plot = j * TWO_PI/BODY_DIV + rotY;
      float x = r * sin(plot)*sin(rotZ);
      float z = r * cos(plot) * cos(rotX);
      float y = (r*sin(plot)*cos(rotZ)) + (r*cos(plot)*sin(rotX));
      body_pt[i][j] = new PVector(x + sampx,y + sampy,z + sampz);
      
      stroke(j*10,j*20,j*30);
      if(i==1){point(x + sampx,y + sampy,z + sampz);};
    }
  }

  
  /*
  //make mesh
  for(int i=0;i<BODY_NODE;i++){
    beginShape(TRIANGLE_STRIP);
    for(int j=0;j<BODY_DIV;j++){
      if(i!=BODY_NODE-1){
        vertex(body_pt[i][j].x, body_pt[i][j].y, body_pt[i][j].z);
        vertex(body_pt[i+1][j].x, body_pt[i+1][j].y, body_pt[i+1][j].z);
        if(j==BODY_DIV-1){
          vertex(body_pt[i][0].x, body_pt[i][0].y, body_pt[i][0].z);
          vertex(body_pt[i+1][0].x, body_pt[i+1][0].y, body_pt[i+1][0].z);
        }
      }
    }
    endShape(CLOSE);
  }
  
  */


}
