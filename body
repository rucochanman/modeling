int BODY_NODE = 12;
int BODY_EDGE = 12;
float BODY_HEIGHT = 46;
float[] param_body_lr = {-0.6,-0.4,-0.2,0,0.2,0.4,0.8,0.4,0.2,0,-0.2,-0.4};
float[] param_body_fb = {0,0,0,0.1,0.5,0.8,0.3,0.1,0,0,0,0};
float[] param_body_tw = {-0.6,-0.8,-1,-0.8,-0.6,0,0,0,0,0,0,-0.3};
PVector[][] body_pt = new PVector[BODY_NODE][BODY_EDGE];

void setup(){
  size(500, 500, P3D); 
  //noLoop();
  frameRate(6);
}


void draw(){

  background(200);
  pushMatrix();
  translate(width/2,height/2);
  //rotateX(PI/2);
  //rotateY(PI/2);  
  int step = frameCount%12;
  body_make(param_body_lr[step],param_body_fb[step],param_body_tw[step]);
  //body_make(0,0,1); 
  popMatrix();
  
}


void body_make(float lr_value, float fb_value, float tw_value){
  //value mapping
  float lr = map(lr_value, -1, 1, 3*PI/4, PI/4);
  float fb = map(fb_value, -1, 2, 3*PI/4, -PI/16);
  float tw = map(tw_value, -1, 1, PI/2, -PI/2); 
  //calc bone
  float h = BODY_HEIGHT;
  float ep_x = h * cos(lr);
  float ep_y = -h * sin(lr) * sin(fb);  
  float ep_z = h * sin(lr) * cos(fb); 
  PVector cp = new PVector(0,-h/2,0);
  //culc points
  for(int i=0;i<BODY_NODE;i++){
      //bone line
      float t = i * 1.0/(BODY_NODE-1);
      float sampx = (2 * cp.x * t * (1-t)) + (ep_x * pow(t,2));
      float sampy = (2 * cp.y * t * (1-t)) + (ep_y * pow(t,2)); 
      float sampz = (2 * cp.z * t * (1-t)) + (ep_z * pow(t,2)); 
      //angle
      float rotZ = atan2(sampx,sampy) + PI/2;
      float rotX = atan2(sampz,-sampy); 
      if(i==0){rotX=0;}
      float rotY = 0;
      if(i!=0){rotY = t*tw;}
      float r = BODY_HEIGHT*1.1 - i;    
      //set points
      for(int j=0;j<BODY_EDGE;j++){
        float plot = j * TWO_PI/BODY_EDGE + rotY;
        float x = r * sin(plot) * sin(rotZ);
        float z = r * cos(plot) * cos(rotX);
        float y = (r*sin(plot)*cos(rotZ)) + (r*cos(plot)*sin(rotX));
        body_pt[i][j] = new PVector(x + sampx,y + sampy,z + sampz);
    }
  }
  //make mesh
  for(int i=0;i<BODY_EDGE;i++){
    beginShape(TRIANGLE_STRIP);
    for(int j=0;j<BODY_NODE;j++){
        vertex(body_pt[j][i].x, body_pt[j][i].y, body_pt[j][i].z);
        if(i==BODY_EDGE-1){
          vertex(body_pt[j][0].x, body_pt[j][0].y, body_pt[j][0].z);
        }else{
          vertex(body_pt[j][i+1].x, body_pt[j][i+1].y, body_pt[j][i+1].z);       
        }
    }
    endShape(CLOSE);
  }
}
