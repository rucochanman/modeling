void arm_thick_set(){
  for(int i=0; i<ARM1_NODE; i++){
    float h = ARM1_LENGTH/2;
    float t = i * 1.0/(ARM1_NODE-1);
    arm1r[i] = h * cos(pow(t,1.3)*(QUARTER_PI*0.6));
  }
  for(int i=0; i<ARM2_NODE; i++){
    float r = arm1r[ARM1_NODE-1];
    float t = i * 1.0/(ARM2_NODE-1);
    arm2h[i] = r * cos(pow(t,0.8)*QUARTER_PI);
    arm2w[i] = r * cos(pow(t,0.8)*QUARTER_PI*0.7);   
  }
}

void hand_pt_set(){
  arm_thick_set();
  //palm
  float l = HAND_LENGTH/HAND_NODE;
  for(int i=0;i<HAND_NODE;i++){
    float t = i * 1.0/(HAND_NODE-1);
    float h = arm2h[ARM2_NODE-1] * cos(t*QUARTER_PI*1.3);
    float w = arm2w[ARM2_NODE-1] * cos(t*QUARTER_PI*1.3); 
    float x = i * l; 
    for(int j=0;j<ARM_EDGE;j++){
      float y = h * sin(j * TWO_PI/ARM_EDGE);
      float z = w * cos(j * TWO_PI/ARM_EDGE);      
      hand_pt[i][j] = new PVector(x,y,z);
    }
  }
  //finger
  float r = arm2w[ARM2_NODE-1];
  float b = HAND_LENGTH*0.7;
  float[] fng_z = {r/1.2, r/2, 0, -r/2};
  float[] fng_x = {b*0.5, b*0.9, b, b*0.9};
  float[] fng_angle = {-PI/8, -PI/8*3, -PI/2, -PI/8*5};   
  for(int i=0;i<FING_NUM;i++){
    PVector pos = new PVector(fng_x[i],0,fng_z[i]);
    fng_pt[i] = make_finger(pos, fng_angle[i]);
  }
}

PVector[][] make_finger(PVector pos, float phi){
  float l = (SCALE/15)/FING_NODE;
  PVector[][] pt = new PVector[FING_NODE][FING_EDGE]; 
  for(int i=0;i<FING_NODE;i++){
    float t = i * 1.0/(FING_NODE-1);
    float r = l * cos(t*PI/3.5);
    PVector bone = new PVector(0,1).rotate(phi).mult(i*l);
    for(int j=0;j<FING_EDGE;j++){
      float plot = j * TWO_PI/FING_EDGE;
      float x = r * sin(plot) * cos(phi);
      float z = r * sin(plot) * sin(phi);
      float y = r * cos(plot);
      pt[i][j] = new PVector(x+pos.x+bone.x, y+pos.y, z+pos.z+bone.y);
    }
  }
  return pt;
}


///////////////////setups//////////////////////////

void make_arm(boolean l, float value1, float value2, float segrot1, float segrot2){
  PVector pos;
  float ang;
  if(l){
    pos = armL_pos;
    ang = 0;
  }else{
    pos = armR_pos;
    ang = PI;
  } 
  pushMatrix();
  translate(pos.x, pos.y, pos.z);
  rotateY(ang);
  float l1 = ARM1_LENGTH;
  float ud1 = map(value1, -1, 2, PI/4, -PI/2);
  PVector ep1 = new PVector(l1*cos(ud1), -l1*sin(ud1));  
  PVector cp1 = new PVector(0,0);
  if(ep1.y<0){
    cp1.y = cos(atan2(ep1.x,ep1.y))*l1/2;
  }else{
    cp1.x = cos(atan2(ep1.x,ep1.y))*l1/2;
  }  
  rotateX(segrot1);
  armrot=0;
  arm_pt_set(ARM1_NODE, ep1, cp1, arm1r, arm1r);
  translate(ep1.x, ep1.y, ep1.z);
  rotateX(segrot2);
  float l2 = ARM2_LENGTH;  
  float ud2 = map(value2, 0, 1, 0, -2.5*PI/4);
  PVector ep2 = new PVector(l2*cos(armrot-ud2), l2*sin(armrot-ud2)); 
  PVector cp2 = new PVector(cos(armrot)*l2/2,abs(sin(armrot)*l2/2));
  if(value1<0){cp2.y=sin(armrot)*l2/2;}
  arm_pt_set(ARM2_NODE, ep2, cp2, arm2h, arm2w);
  translate(ep2.x, ep2.y, ep2.z);
  rotateZ(armrot);
  make_mesh(HAND_NODE, ARM_EDGE, hand_pt);
  for(int i=0;i<FING_NUM;i++){
    make_mesh(FING_NODE, FING_EDGE, fng_pt[i]);
  }
  popMatrix();
}

void arm_pt_set(int node, PVector ep, PVector cp, float[] thickh, float[] thickw){
  int NODE_NUM = node;
  float rot = 0;
  PVector zpos = new PVector(0,0);
  PVector[][] pt = new PVector[NODE_NUM][ARM_EDGE];
  //bone cal
  for(int i=0; i<NODE_NUM; i++){ 
    float t = i * 1.0/(NODE_NUM-1);
    float x = (2 * cp.x * t * (1-t)) + (ep.x * pow(t,2));
    float y = (2 * cp.y * t * (1-t)) + (ep.y * pow(t,2)); 
    rot = -1 * atan2(-1*(y-zpos.y),x-zpos.x);
    if(i==0){rot=armrot;}
    zpos = new PVector(x,y);
    //set points
    for(int j=0; j<ARM_EDGE; j++){
      float z = thickw[i] * cos(j * 2 * PI/ARM_EDGE);
      PVector v = new PVector(0, thickh[i] * sin(j * 2 * PI/ARM_EDGE)).rotate(rot);
      pt[i][j] = new PVector(v.x + x, v.y + y, z); 
    }
  }
  armrot = rot;
  make_mesh(NODE_NUM, ARM_EDGE, pt); 
}
