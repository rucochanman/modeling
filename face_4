void head_pt_set(){
  //head_pt
  for(int i=0; i<HEAD_EDGE; i++){  
    float m = HEAD_EDGE/2;
    float ediv = ((2*m-i)-2*(m-(i%m)))/m;
    for(int j=0; j<HEAD_NODE; j++){  
      float ndiv = j*1.0/(HEAD_NODE-1);
      head_pt[i][j] = head_pt_cal(ndiv, ediv);
    }
  }

}

PVector head_pt_cal(float ndiv, float ediv){
  //variables
  if(ndiv==0||ndiv==1){ediv=0;}
  float pidiv = abs(ediv);
  float amp1 = 0.13;
  float amp2 = 0.1;  
  float ffreq = 3.0;
  float bfreq1 = 0.4;
  float bfreq2 = 0.9;
  float fphase1 = 1.4;
  float fphase2 = -0.35;
  float bphase1 = 2.0;    
  float bphase2 = -1.8;
  float c = 0.41;
  //cal step
  float cp = 0.4;
  float x1 = 3 * cp * ndiv * pow((1-ndiv),2);
  float x2 = 3 * cp * pow(ndiv,2) * (1-ndiv);
  float x3 = pow(ndiv,3);
  float step = x1 + x2 + x3;
  //params
  float famp = (1-ndiv)*amp1 + ndiv*amp2;
  float bamp = (1-ndiv)*amp1 + ndiv*amp2;
  float bfreq = (1-ndiv)*bfreq1 + ndiv*bfreq2;
  float fphase = (1-step)*fphase1 + step*fphase2; 
  float bphase = (1-step)*bphase1 + step*bphase2;
  //synthesis
  float front = famp * sin(step*ffreq*PI+fphase) + c;
  float back = bamp * sin(step*bfreq*PI+bphase) + c;
  float scale = 0.14*sin(1.8*pidiv*PI)+1.245;
  float p = pow(pidiv,1.3);
  if(p>0.45){
    p=pow(1.0-p,3)+p;
    scale = 0.15*sin(1.8*(pidiv-0.5)*PI+PI/8)+1.12;
  }
  float synth = (1-p)*front + p*back;
  //set points
  float thita = PI - step * PI;
  float phi = ediv * PI;
  float size = SCALE;
  float z = size * synth * sin(thita) * cos(phi) * scale;
  float x = size * synth * sin(thita) * sin(phi) * scale;
  float y = size * synth * cos(thita); 
  PVector pt = new PVector(x,y,z);
  return pt;
}














void make_face(float lr, float fb, float tw, PVector pos){
  
  boolean left = true;
  boolean right = false;
  float line_width = SCALE/40;
  
  //head
  pushMatrix();
  translate(pos.x, pos.y, pos.z);
  rotateZ(-lr-PI/2);
  rotateX(-fb-PI/2);
  rotateY(tw);
  println(tw);
  fill(HEAD_COL);
  head_mesh(); 
  
  //eye
  fill(EYE_COL);
  make_eye(left);
  make_eye(right);
  
  //hilights
  fill(255);
  float h1_r = SCALE/18.5;
  float h2_r = h1_r/2;
  make_hilights(h1_r, PI/10, PI/20, 0.43, 0.15); //h1L
  make_hilights(h1_r, PI/10, -PI/10, 0.43, -0.2); //h1R
  make_hilights(h2_r, PI/16, PI/10, 0.55, 0.2); //h2L
  make_hilights(h2_r, PI/16, -PI/20, 0.55, -0.12); //h2R
  
  //eye_lash
  stroke(LINE_COL);
  strokeWeight(line_width);
  make_eyelash(left);
  make_eyelash(right);  
  
  //eye_brown
  strokeWeight(line_width*0.8);
  make_eyebrow(left);
  make_eyebrow(right); 
  //mouth
  make_mouth();
  
  popMatrix();
  
    strokeWeight(1);  
  
}


void make_mouth(){
  float wr = SCALE/7600;
  float hr = wr*0.9;
  PVector pt;
  int TIP_EDGE = int(SCALE/10);  
  for(int i=0;i<TIP_EDGE;i++){
    float x = wr * cos(i * PI/(TIP_EDGE-1)) + wr;
    float y = hr * sin(i * PI/(TIP_EDGE-1))+0.7;
    pt = head_pt_cal(y,x);
    point(pt.x, pt.y, pt.z);
    point(-pt.x, pt.y, pt.z);   
  }
}


void make_hilights(float r, float xang, float yang, float ndiv, float ediv){
  PVector pos = head_pt_cal(ndiv, ediv);
  pos.z *= 1.15;
  pushMatrix();
  translate(pos.x,pos.y,pos.z);
  rotateX(xang);
  rotateY(yang);
  int TIP_EDGE = 12;
  beginShape();
  for(int i=0;i<TIP_EDGE;i++){
    float x = r * cos(i * TWO_PI/(TIP_EDGE-1));
    float y = r * sin(i * TWO_PI/(TIP_EDGE-1));
    vertex(x,y,0);
  }
  endShape(CLOSE);
  popMatrix();
}


void make_eye(boolean l){
  PVector[][] pt = new PVector[EYE_NODE][EYE_EDGE];
  float xdiv = 0.16;
  float yang = PI/12;
  float size = SCALE/5.8;
  if(!l){
    xdiv *= -1;
    yang *= -1;
  }
  PVector pos = head_pt_cal(0.5, xdiv);
  pos.z *= 0.91;
  pushMatrix();
  translate(pos.x,pos.y,pos.z);
  rotateX(PI/12);
  rotateY(yang);
  float z = 0;
  for(int i=0;i<EYE_NODE;i++){
    float r = (EYE_NODE-1-i) * size/EYE_NODE;
    float thick = pow((EYE_NODE-i)*1.0/EYE_NODE,4)*8;
    z += thick;
    for(int j=0;j<EYE_EDGE;j++){
      float x = r * cos(j*TWO_PI/(EYE_EDGE-1));
      float y = r * sin(j*TWO_PI/(EYE_EDGE-1));
      if(i==0){z = thick - abs(r/8*cos(j*TWO_PI/(EYE_EDGE-1)));}
      pt[i][j] = new PVector(x,y,z);
    }
  } 
  make_mesh(EYE_NODE, EYE_EDGE, pt);
  popMatrix();
}


void make_eyelash(boolean l){
  float r = -SCALE/20;
  float xdiv = 0.11;
  if(!l){xdiv = -0.22;}
  PVector pos1 = head_pt_cal(0.36, xdiv);
  PVector pos2 = new PVector(pos1.x, pos1.y, pos1.z); 
  pos2.x += r*cos(PI/4);
  pos2.y += r*sin(PI/4);  
  line(pos1.x, pos1.y, pos1.z, pos2.x, pos2.y, pos2.z);
  point(pos2.x, pos2.y, pos2.z);
}


void make_eyebrow(boolean l){
  float xdiv1 = 0.14;
  float xdiv2 = 0.20;
  if(!l){
    xdiv1 *= -1;
    xdiv2 *= -1;    
  }
  PVector pos1 = head_pt_cal(0.20,xdiv1);
  PVector pos2 = head_pt_cal(0.21,xdiv2);
  line(pos1.x,pos1.y,pos1.z,pos2.x,pos2.y,pos2.z);
  point(pos1.x,pos1.y,pos1.z);
  point(pos2.x,pos2.y,pos2.z);
}


void head_mesh(){
  beginShape(TRIANGLE_STRIP);
  for(int i=0; i<HEAD_EDGE; i++){
    for(int j=0; j<HEAD_NODE; j++){
      if(i==HEAD_EDGE-1){
        vertex(head_pt[i][j].x,head_pt[i][j].y,head_pt[i][j].z);
        vertex(head_pt[0][j].x,head_pt[0][j].y,head_pt[0][j].z);
      }else{        
        vertex(head_pt[i][j].x,head_pt[i][j].y,head_pt[i][j].z);
        vertex(head_pt[i+1][j].x,head_pt[i+1][j].y,head_pt[i+1][j].z);
      }
    }
  }
  endShape(CLOSE);
}
