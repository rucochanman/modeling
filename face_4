//to main
int HEAD_NODE = 18;
int HEAD_EDGE = 18;
float HEAD_SIZE = 150;
PVector[][] head_pt = new PVector[HEAD_EDGE][HEAD_NODE];

//eye
int EYE_NODE = 6;
int EYE_EDGE = 18;
PVector eye_pos;
PVector elL_pos;
PVector elR_pos;
PVector eb1_pos;
PVector eb2_pos;
PVector h1L_pos;
PVector h2L_pos;
PVector h1R_pos;
PVector h2R_pos;
PVector[][] eye_pt = new PVector[EYE_NODE][EYE_EDGE];

void setup(){
  size(500, 500, P3D);
  noLoop();
  noStroke();
  frameRate(3);
  head_pt_set();
  face_pt_set();

 
}

void draw(){
  
  //lights();
  stroke(0);
  background(200);

  pushMatrix();
  translate(width/2,height/2);
  scale(1.3);
  //rotateX(-4*PI/8);
  //rotateY(3*PI/8);
  make_face();
  popMatrix();
  
}  
  
  

  

void head_pt_set(){
  //face_pt
  for(int i=0; i<HEAD_EDGE; i++){    
    float n = 0;
    if(i>HEAD_EDGE/2){n = 2*(HEAD_EDGE/2-i);}
    float ediv = (i+n)/(HEAD_EDGE/2);
    if(i>HEAD_EDGE/2){ediv = -1*ediv;}
    for(int j=0; j<HEAD_NODE; j++){  
      float ndiv = j*1.0/(HEAD_NODE-1);
      head_pt[i][j] = head_pt_cal(ndiv, ediv);
    }
  }
  
}



PVector head_pt_cal(float ndiv, float ediv){
  if(ndiv==0||ndiv==1){ediv=0;}
  float pidiv = abs(ediv);
  //variables
  float amp1 = 0.15;
  float amp2 = 0.1;  
  float ffreq1 = 3.2;
  float ffreq2 = 2.6;
  float bfreq1 = 0.4;
  float bfreq2 = 0.9;
  float fphase1 = 1.7;
  float bphase1 = 2.0;  
  float fphase2 = -0.5;
  float bphase2 = -1.8;
  float c = 0.43;
  //cal step
  float cp = 0.4;
  float x1 = 3 * cp * ndiv * pow((1-ndiv),2);
  float x2 = 3 * cp * pow(ndiv,2) * (1-ndiv);
  float x3 = pow(ndiv,3);
  float step = x1 + x2 + x3;
  //params
  float famp = (1-ndiv)*amp1 + ndiv*amp2;
  float bamp = (1-ndiv)*amp1 + ndiv*amp2;  
  float ffreq = (1-ndiv)*ffreq1 + ndiv*ffreq2;
  float bfreq = (1-ndiv)*bfreq1 + ndiv*bfreq2;
  float fphase = (1-step)*fphase1 + step*fphase2; 
  float bphase = (1-step)*bphase1 + step*bphase2;
  //synthesis
  float front = famp * sin(step*ffreq*PI+fphase) + c;
  float back = bamp * sin(step*bfreq*PI+bphase) + c;
  float scale = 0.14*sin(1.5*pidiv*PI)+1.35;
  float p = pow(pidiv,1.8);
  if(p>0.5){
    p=pow(1.0-p,1.9)+p;
    scale = 0.1*sin(2*(pidiv-0.5)*PI)+1.12;
  }
  float synth = (1-p)*front + p*back;
  //set points
  float thita = PI - step * PI;
  float phi = ediv * PI;
  float z = HEAD_SIZE * synth * sin(thita) * cos(phi) * scale;
  float x = HEAD_SIZE * synth * sin(thita) * sin(phi) * scale;
  float y = HEAD_SIZE * synth * cos(thita); 
  PVector pt = new PVector(x,y,z);
  return pt;
}







void face_pt_set(){
  
  //eye_pt
  float thick, r, x, y;
  float z = 0;
  for(int i=0;i<EYE_NODE;i++){
    r = (EYE_NODE-1-i) * HEAD_SIZE/5.8/EYE_NODE;
    thick = pow((EYE_NODE-i)*1.0/EYE_NODE,4)*8;
    z += thick;
    for(int j=0;j<EYE_EDGE;j++){
      x = r * cos(j*TWO_PI/(EYE_EDGE-1));
      y = r * sin(j*TWO_PI/(EYE_EDGE-1));
      if(i==0){z = thick - abs(r/8*cos(j*TWO_PI/(EYE_EDGE-1)));}
      eye_pt[i][j] = new PVector(x,y,z);
    }
  }
  
  //eye_pos 
  eye_pos = head_pt_cal(0.484, 0.16);
  eye_pos.z = eye_pos.z * 0.89;
  //eye_lash_pos
  float el_r=5;
  elL_pos = head_pt_cal(0.34,0.11);
  elR_pos = head_pt_cal(0.34,-0.24);
  //eye_brown_pos
  eb1_pos = head_pt_cal(0.19,0.14);
  eb2_pos = head_pt_cal(0.20,0.20); 
  //hilights_pos
  h1L_pos = head_pt_cal(0.42,0.15);
  h1L_pos.z *= 1.15;
  
}









void make_face(){

  float el_r = -HEAD_SIZE/20;
  float el_w = HEAD_SIZE/40;  
  float eb_w = HEAD_SIZE/50;
  
  fill(255,255,255,50);
  head_mesh(); 
  
  //eyeL
  fill(0,0,255);
  pushMatrix();
  translate(eye_pos.x,eye_pos.y,eye_pos.z);
  rotateX(PI/10);
  rotateY(PI/8.5);
  make_mesh(EYE_NODE, EYE_EDGE, eye_pt);
  popMatrix(); 
  
  //eye_lashL
  pushMatrix();
  translate(elL_pos.x,elL_pos.y,elL_pos.z);
  strokeWeight(el_w);
  line(0,0,0,el_r*cos(PI/4),el_r*sin(PI/4),0);
  point(el_r*cos(PI/4),el_r*sin(PI/4),0);
  popMatrix(); 
  
  //eye_brownL
  strokeWeight(eb_w);
  point(eb1_pos.x,eb1_pos.y,eb1_pos.z);
  point(eb2_pos.x,eb2_pos.y,eb2_pos.z);   
  line(eb1_pos.x,eb1_pos.y,eb1_pos.z,eb2_pos.x,eb2_pos.y,eb2_pos.z); 
  
  //hilightsL
  pushMatrix();
  noStroke();
  translate(h1L_pos.x,h1L_pos.y,h1L_pos.z);
  rotateX(PI/10);
  rotateY(PI/12);
  make_hilights();
  popMatrix();
  strokeWeight(1);
  

  //eyeR
  fill(0,0,255);
  pushMatrix();
  translate(-eye_pos.x,eye_pos.y,eye_pos.z);
  rotateX(PI/10);
  rotateY(-PI/8.5);
  make_mesh(EYE_NODE, EYE_EDGE, eye_pt);
  popMatrix();   
  
  //eye_lashR
  pushMatrix();
  translate(elR_pos.x,elR_pos.y,elR_pos.z);
  strokeWeight(el_w);
  line(0,0,0,el_r*cos(PI/4),el_r*sin(PI/4),0);
  point(el_r*cos(PI/4),el_r*sin(PI/4),0);
  popMatrix();  
  
  //eye_brownR
  strokeWeight(eb_w);
  point(-eb1_pos.x,eb1_pos.y,eb1_pos.z);
  point(-eb2_pos.x,eb2_pos.y,eb2_pos.z);   
  line(-eb1_pos.x,eb1_pos.y,eb1_pos.z,-eb2_pos.x,eb2_pos.y,eb2_pos.z);
  
  
  
  
  
  /*
  ////left
  //eyeL
  fill(0,0,255);
  pushMatrix();
  translate(eye_pos.x,eye_pos.y,eye_pos.z);
  rotateX(PI/9);
  rotateY(PI/12);
  make_mesh(EYE_NODE, EYE_EDGE, eye_pt);
  popMatrix();  
   
  //eyelashL
  pushMatrix();
  translate(eye_pos.x,eye_pos.y,eye_pos.z);  
  translate(el_pos.x,el_pos.y,el_pos.z);
  make_eyelines(PI/5, HEAD_SIZE/23, 1);
  popMatrix(); 
  
  //hilightL1
  fill(255);
  pushMatrix();
  translate(eye_pos.x,eye_pos.y,eye_pos.z);  
  translate(h1_pos.x,h1_pos.y,h1_pos.z+1);
  rotateX(PI/8);
  rotateY(PI/30);
  make_eyelines(0, 0, 7);
  popMatrix();  
  
  //hilightL2
  fill(255);
  pushMatrix();
  translate(eye_pos.x,eye_pos.y,eye_pos.z);  
  translate(h2_pos.x,h2_pos.y,h2_pos.z+2);
  rotateX(PI/16);
  rotateY(PI/12);
  make_eyelines(0, 0, 5);
  popMatrix(); 
 
  //eyebrownL
  pushMatrix();
  translate(eb_pos.x, eb_pos.y, eb_pos.z);
  make_eyelines(PI/16, HEAD_SIZE/16, 0.8);
  popMatrix();
  

  ////right
  //eyeR
  fill(0,0,255);
  pushMatrix();
  translate(-eye_pos.x,eye_pos.y,eye_pos.z);
  rotateX(PI/9);
  rotateY(-PI/12);  
  make_mesh(EYE_NODE, EYE_EDGE, eye_pt);
  popMatrix();  
  
  //eyelashR
  pushMatrix();
  translate(-eye_pos.x,eye_pos.y,eye_pos.z);  
  translate(el_pos.x,el_pos.y,el_pos.z);
  make_eyelines(PI/5, HEAD_SIZE/23, 1);
  popMatrix(); 
  
  //hilightL1
  fill(255);
  pushMatrix();
  translate(-eye_pos.x,eye_pos.y,eye_pos.z);  
  translate(h1_pos.x,h1_pos.y,h1_pos.z+1);
  rotateX(PI/8);
  rotateY(-PI/12);
  make_eyelines(0, 0, 7);
  popMatrix();  
  
  //hilightL2
  fill(255);
  pushMatrix();
  translate(-eye_pos.x,eye_pos.y,eye_pos.z);  
  translate(h2_pos.x,h2_pos.y,h2_pos.z+2);
  rotateX(PI/16);
  rotateY(-PI/12);
  make_eyelines(0, 0, 5);
  popMatrix(); 
 
  //eyebrownL
  pushMatrix();
  translate(-eb_pos.x, eb_pos.y, eb_pos.z);
  make_eyelines(-PI/16, HEAD_SIZE/16, 0.8);
  popMatrix();
  
   
  
  

*/



}



void make_hilights(){
  fill(255);
  int TIP_EDGE = 12;
  float r = 8;
  beginShape();
  for(int i=0;i<TIP_EDGE;i++){
    float x = r * cos(i * TWO_PI/(TIP_EDGE-1));
    float y = r * sin(i * TWO_PI/(TIP_EDGE-1));
    vertex(x,y,0);
  }
  endShape(CLOSE);
}



void make_eyelines(float angle, float length, float size){
  int TIP_EDGE = 12;
  float r = size;
  float w = r*4;
  float end_x = -length * cos(angle);
  float end_y = -length * sin(angle);     
  //tip1
  beginShape();
  for(int i=0;i<TIP_EDGE;i++){
    float x = r * cos(i * TWO_PI/(TIP_EDGE-1));
    float y = r * sin(i * TWO_PI/(TIP_EDGE-1));
    vertex(x,y,0);
  }
  endShape(CLOSE);
  //tip2
  beginShape();
  for(int i=0;i<TIP_EDGE;i++){
    float x = r * cos(i * TWO_PI/(TIP_EDGE-1));
    float y = r * sin(i * TWO_PI/(TIP_EDGE-1));
    vertex(x + end_x, y + end_y, 0);
  }
  endShape(CLOSE);  
  strokeWeight(w);
  line(0, 0, 0, end_x, end_y, 0);
  strokeWeight(1);
}

 
 
//to main
void make_mesh(int NODE_NUM, int EDGE_NUM, PVector[][] pt){
  for(int i=0; i<EDGE_NUM; i++){
    beginShape(TRIANGLE_STRIP);
    for(int j=0; j<NODE_NUM; j++){
      vertex(pt[j][i].x,pt[j][i].y,pt[j][i].z);
      if(i==EDGE_NUM-1){
        vertex(pt[j][0].x,pt[j][0].y,pt[j][0].z);
      }else{
        vertex(pt[j][i+1].x,pt[j][i+1].y,pt[j][i+1].z);
      }
    }
    endShape();
  }
  beginShape();
  for(int i=0; i<EDGE_NUM; i++){
    vertex(pt[NODE_NUM-1][i].x,pt[NODE_NUM-1][i].y,pt[NODE_NUM-1][i].z);
  }
  endShape();
}


void head_mesh(){
  beginShape(TRIANGLE_STRIP);
  for(int i=0; i<HEAD_EDGE; i++){
    for(int j=0; j<HEAD_NODE; j++){
      //point(head_pt[i][j].x,head_pt[i][j].y,head_pt[i][j].z);
      //println("i: " + i + " j: "+ j + " " + head_pt[i][j]);
      if(i==HEAD_EDGE-1){
        vertex(head_pt[i][j].x,head_pt[i][j].y,head_pt[i][j].z);
        vertex(head_pt[0][j].x,head_pt[0][j].y,head_pt[0][j].z);
      }else{        
        vertex(head_pt[i][j].x,head_pt[i][j].y,head_pt[i][j].z);
        vertex(head_pt[i+1][j].x,head_pt[i+1][j].y,head_pt[i+1][j].z);
      }
    }
  }
  endShape(CLOSE);
}


      
