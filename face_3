int FACE_NODE = 18;
int FACE_EDGE = 16;
float FACE_SIZE = 150;
PVector[][] face_pt = new PVector[FACE_EDGE][FACE_NODE];

float amp1 = 0.15;
float amp2 = 0.1;
float[] freq1 = {3.5,3.4,3.4,3.4,3.2,3.1,2.8,2.5,2};
float[] freq2 = {2.6,2.6,2.6,2.6,2.6,0.8,0.8,0.8,0.8};
float phase1 = 1.5;
float phase2 = -0.5;
float[] scale_x = {1,1.5,1.5,1.5,1.55,1.38,1.4,1.4,1}; 
float[] scale_z = {1.5,1.5,1.5,1.5,1,1.2,1.2,1.26,1.18}; 
float c = 0.5;



void setup(){
  size(500, 500, P3D);
  noLoop();
  frameRate(3);
 
}

void draw(){
  
  background(200);
  pushMatrix();
  translate(width/2,height/2);
  //rotateX(PI/2);
  //rotateY(PI/2);
  rotateY(16 * PI/8);
  face_make();
  face_mesh();
  popMatrix();
  
  
}  
  
void face_make(){  

  for(int i=0; i<FACE_EDGE; i++){    
    int n = 0;
    if(i>8){n = 2*(8-i);}  
    
    //cal step
    for(int j=0; j<FACE_NODE; j++){
      
      float t = j*1.0/(FACE_NODE-1);
      float x1 = 3 * FACE_NODE/2.5 * t * pow((1-t),2);
      float x2 = 3 * FACE_NODE/2.5 * pow(t,2) * (1-t);
      float x3 = (FACE_NODE-1) * pow(t,3);
      float step = x1 + x2 + x3;
      
      //float amp = (((FACE_NODE-1)-step)*amp1 + step*amp2)/(FACE_NODE-1);
      float amp = (1-t)*amp1 + t*amp2;
      float freq = (1-t)*freq1[i+n] + t*freq2[i+n];
      //float freq = (((FACE_NODE-1)-step)*freq1[i+n] + step*freq2[i+n])/(FACE_NODE-1);
      float phase = (((FACE_NODE-1)-step)*phase1 + step*phase2)/(FACE_NODE-1);          
      
      //sin waves
      float sin = amp * sin(step*freq*PI/(FACE_NODE-1)+phase) + c;
      //set points
      float thita = PI - step * PI/(FACE_NODE-1);
      float phi = i * PI/8;
      float z = FACE_SIZE * sin * sin(thita) * cos(phi) * scale_z[i+n];
      float x = FACE_SIZE * sin * sin(thita) * sin(phi) * scale_x[i+n];
      float y = FACE_SIZE * sin * cos(thita);

      face_pt[i][j] = new PVector(x,y,z);
      
      strokeWeight(1);
      stroke(0,0,0);
      point(x,y,z);
      //if(i==5 || i==11 ){point(x,y,z);};
      //if(i==0||i==8){point(x,y,z);};
      
 
      
    }
  }
}



void face_mesh(){
  beginShape(TRIANGLE_STRIP);
  for(int i=0; i<FACE_EDGE; i++){
    for(int j=0; j<FACE_NODE; j++){
      if(i==FACE_EDGE-1){
        vertex(face_pt[i][j].x,face_pt[i][j].y,face_pt[i][j].z);
        vertex(face_pt[0][j].x,face_pt[0][j].y,face_pt[0][j].z);
      }else{        
        vertex(face_pt[i][j].x,face_pt[i][j].y,face_pt[i][j].z);
        vertex(face_pt[i+1][j].x,face_pt[i+1][j].y,face_pt[i+1][j].z);
      }
    }
  }
  endShape(CLOSE);
}









 
      
