int FACE_NODE = 18;
int FACE_EDGE = 14;
float FACE_SIZE = 150;
PVector[][] face_pt = new PVector[FACE_EDGE][FACE_NODE];

float ampf1 = 0.15;
float ampf2 = 0.1;
float ampb1 = 0.15;
float ampb2 = 0.15;
float ffreq1 = 3.4;
float ffreq2 = 2.6;
float bfreq1 = 0.9;
float bfreq2 = 0.1;
float fphase1 = 1.4;
float fphase2 = -0.5;
float bphase1 = 1.3;
float bphase2 = -2.8;
float fc = 0.45;
float bc = 0.5;
float[] scale_x = {1, 1, 1, 1, 1, 1, 1, 1}; 
float[] scale_z = {1.5, 1, 1, 1, 1, 1, 1, 1.52}; 



void setup(){
  size(500, 500, P3D);
  noLoop();
  noStroke();
  frameRate(3);
 
}

void draw(){
  
  background(200);
  //lights();
  pushMatrix();
  translate(width/2,height/2);
  rotateY(PI/2);
  //rotateY(20*PI/8);
  //rotateY(frameCount * PI/8);
  face_make();
  //face_mesh();
  popMatrix();
  
  
}  
  
void face_make(){
  
  for(int i=0; i<FACE_EDGE; i++){    
    int n = 0;
    if(i>FACE_EDGE/2){n = 2*(FACE_EDGE/2-i);}
    float p = (i+n)*1.0/FACE_EDGE;  
  
    for(int j=0; j<FACE_NODE; j++){  
    
      float t = j*1.0/(FACE_NODE-1);
      float x1 = 3 * FACE_NODE/2.5 * t * pow((1-t),2);
      float x2 = 3 * FACE_NODE/2.5 * pow(t,2) * (1-t);
      float x3 = (FACE_NODE-1) * pow(t,3);
      float step = x1 + x2 + x3; 
    
      float ampf = (1-t)*ampf1 + t*ampf2;
      float ampb = (1-t)*ampb1 + t*ampb2;      
      float ffreq = (1-t)*ffreq1 + t*ffreq2;
      float bfreq = (1-t)*bfreq1 + t*bfreq2;
      float fphase = (((FACE_NODE-1)-step)*fphase1 + step*fphase2)/(FACE_NODE-1);          
      float bphase = (((FACE_NODE-1)-step)*bphase1 + step*bphase2)/(FACE_NODE-1);                
    
      float front = ampf * sin(step*ffreq*PI/(FACE_NODE-1)+fphase) + fc;
      float back = ampb * sin(step*bfreq*PI/(FACE_NODE-1)+bphase) + bc;
      float synth = (1-p)*front + p*back;
            
      //set points
      float thita = PI - step * PI/(FACE_NODE-1);
      float phi = i * PI/(FACE_EDGE/2);
      float z = FACE_SIZE * synth * sin(thita) * cos(phi) * scale_z[i+n];
      float x = FACE_SIZE * synth * sin(thita) * sin(phi) * scale_x[i+n];
      float y = FACE_SIZE * synth * cos(thita);

      face_pt[i][j] = new PVector(x,y,z);  
      strokeWeight(5);
      stroke(0,0,0);
      if(i==0||i==7){point(x,y,z);}
      //point(x,y,z);
    
      }
    }
}



void face_mesh(){
  beginShape(TRIANGLE_STRIP);
  for(int i=0; i<FACE_EDGE; i++){
    for(int j=0; j<FACE_NODE; j++){
      if(i==FACE_EDGE-1){
        vertex(face_pt[i][j].x,face_pt[i][j].y,face_pt[i][j].z);
        vertex(face_pt[0][j].x,face_pt[0][j].y,face_pt[0][j].z);
      }else{        
        vertex(face_pt[i][j].x,face_pt[i][j].y,face_pt[i][j].z);
        vertex(face_pt[i+1][j].x,face_pt[i+1][j].y,face_pt[i+1][j].z);
      }
    }
  }
  endShape(CLOSE);
}









 
      
